# Production Docker Compose Configuration
# Optimized for production deployment with external services

services:
  whisperengine-bot:
    build:
      context: .
      dockerfile: Dockerfile.bundled-models
      target: production
    image: whisperengine-bot:${VERSION:-latest}
    container_name: whisperengine-bot
    restart: unless-stopped
    
    # Environment configuration
    env_file:
      - .env             # Local configuration (includes secrets like DISCORD_BOT_TOKEN)
    environment:
      # Production defaults
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEBUG_MODE=false
      - PYTHONUNBUFFERED=1
      - HEALTH_CHECK_PORT=9090
      - HEALTH_CHECK_HOST=0.0.0.0
      - DISABLE_MEMORY_IMPORTANCE=${DISABLE_MEMORY_IMPORTANCE:-false}
      
    # Expose health check port for container orchestration
    ports:
      - "9090:9090"  # Health check endpoint
      
    # Resource limits - Optimized for multi-core processing and concurrent operations
    deploy:
      resources:
        limits:
          memory: 4G          # Increased to support 8-12 thread workers and 4-6 process workers
          cpus: '4.0'         # Increased to match application's concurrent processing needs
        reservations:
          memory: 2G          # Baseline for reliable operation
          cpus: '2.0'         # Ensure minimum cores for thread/process pools
    
    # Health check - use the built-in health endpoint
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9090/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Persistent volumes - Bot application data only
    volumes:
      # Application-specific data (NOT datastore data)
      - bot_backups:/app/backups
      - bot_privacy:/app/privacy_data
      - bot_temp:/app/temp_images
      - bot_logs:/app/logs
      # Configuration files (read-only)
      - ./prompts:/app/prompts:ro
      - ./config:/app/config:ro
      
    # Network
    networks:
      - bot_network
      
    # Dependencies with health check conditions
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      chromadb:
        condition: service_healthy  # Now ChromaDB has health check
      neo4j:
        condition: service_healthy

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: whisperengine-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - bot_network
    # Resource limits for Redis caching
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    # Security: Run as non-root user
    user: "999:999"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # PostgreSQL for persistent data
  postgres:
    image: postgres:16-alpine
    container_name: whisperengine-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-whisper_engine}
      POSTGRES_USER: ${POSTGRES_USER:-bot_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_postgres.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - bot_network
    # Resource limits for PostgreSQL
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    # Security: Run as postgres user  
    user: "postgres:postgres"
    # Performance tuning for production
    command: >
      postgres
      -c shared_buffers=256MB
      -c max_connections=200
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-bot_user} -d ${POSTGRES_DB:-whisper_engine}"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s

  # ChromaDB for vector storage
  chromadb:
    image: chromadb/chroma:latest
    container_name: whisperengine-chromadb
    restart: unless-stopped
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
      - CHROMA_SERVER_AUTH_CREDENTIALS_PROVIDER=${CHROMA_AUTH_PROVIDER:-}
      - CHROMA_SERVER_AUTH_CREDENTIALS=${CHROMA_AUTH_TOKEN:-}
    volumes:
      - chromadb_data:/chroma/chroma
    ports:
      - "8000:8000"
    networks:
      - bot_network
    # Resource limits for ChromaDB vector operations
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD-SHELL", "timeout 5 bash -c '</dev/tcp/localhost/8000' || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Neo4j graph database
  neo4j:
    image: neo4j:5.15-community
    container_name: whisperengine-neo4j
    restart: unless-stopped
    environment:
      - NEO4J_AUTH=${NEO4J_USERNAME:-neo4j}/${NEO4J_PASSWORD:-neo4j_password_change_me}
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=2G
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    networks:
      - bot_network
    # Resource limits for Neo4j graph operations
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:7474/ || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s



# Networks
networks:
  bot_network:
    driver: bridge
    name: whisperengine-network

# Volumes - Properly separated by service responsibility
volumes:
  # Bot application volumes (NOT datastore data)
  bot_backups:
    name: whisperengine-backups
    driver: local
  bot_privacy:
    name: whisperengine-privacy
    driver: local
  bot_temp:
    name: whisperengine-temp
    driver: local
  bot_logs:
    name: whisperengine-logs
    driver: local
  
  # Datastore volumes (managed by their respective services)
  redis_data:
    name: whisperengine-redis
    driver: local
  postgres_data:
    name: whisperengine-postgres
    driver: local
  chromadb_data:
    name: whisperengine-chromadb
    driver: local
  neo4j_data:
    name: whisperengine-neo4j-data
    driver: local
  neo4j_logs:
    name: whisperengine-neo4j-logs
    driver: local

