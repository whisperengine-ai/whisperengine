# Production Docker Compose Configuration
# Optimized for production deployment with external services

services:
  whisperengine-bot:
    build:
      context: .
      dockerfile: docker/Dockerfile.multi-stage
      target: production
    image: whisperengine-bot:${VERSION:-latest}
    container_name: whisperengine-bot
    restart: unless-stopped
    
    # Environment configuration
    env_file:
      - .env.production  # Base production defaults
      - .env             # Local overrides (includes secrets like DISCORD_BOT_TOKEN)
    environment:
      # Production overrides
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEBUG_MODE=false
      - PYTHONUNBUFFERED=1
      
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    
    # Health check - verify the main Python process is running
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f 'python.*main' > /dev/null || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Persistent volumes
    volumes:
      - bot_data:/app/chromadb_data
      - bot_backups:/app/backups
      - bot_privacy:/app/privacy_data
      - bot_temp:/app/temp_images
      - bot_logs:/app/logs
      # System prompt customization (mount prompts directory for flexible prompt management)
      - ./prompts:/app/prompts:ro
      - ./config:/app/config:ro
      
    # Network
    networks:
      - bot_network
      
    # Dependencies
    depends_on:
      - redis
      - postgres
      - chromadb

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: whisperengine-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - bot_network

  # PostgreSQL for persistent data
  postgres:
    image: postgres:16-alpine
    container_name: whisperengine-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-whisper_engine}
      POSTGRES_USER: ${POSTGRES_USER:-bot_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_postgres.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - bot_network

  # ChromaDB for vector storage
  chromadb:
    image: chromadb/chroma:latest
    container_name: whisperengine-chromadb
    restart: unless-stopped
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
      - CHROMA_SERVER_AUTH_CREDENTIALS_PROVIDER=${CHROMA_AUTH_PROVIDER:-}
      - CHROMA_SERVER_AUTH_CREDENTIALS=${CHROMA_AUTH_TOKEN:-}
    volumes:
      - chromadb_data:/chroma/chroma
    networks:
      - bot_network



# Networks
networks:
  bot_network:
    driver: bridge
    name: whisperengine-network

# Volumes
volumes:
  bot_data:
    name: whisperengine-data
  bot_backups:
    name: whisperengine-backups
  bot_privacy:
    name: whisperengine-privacy
  bot_temp:
    name: whisperengine-temp
  bot_logs:
    name: whisperengine-logs
  redis_data:
    name: whisperengine-redis
  postgres_data:
    name: whisperengine-postgres
  chromadb_data:
    name: whisperengine-chromadb

