# Multi-Bot Docker Compose Template
# This file is a template that gets populated by scripts/generate_multi_bot_config.py
# DO NOT EDIT: Generated sections will be overwritten

services:
  # ===== INFRASTRUCTURE SERVICES =====
  postgres:
    image: postgres:16.4-alpine
    container_name: whisperengine-multi-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: whisperengine
      POSTGRES_USER: whisperengine
      POSTGRES_PASSWORD: whisperengine_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - bot_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U whisperengine -d whisperengine"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis - Commented out since we're using vector-native memory with Qdrant only
  # redis:
  #   image: redis:7.4-alpine
  #   container_name: whisperengine-multi-redis
  #   restart: unless-stopped
  #   ports:
  #     - "6380:6379"
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - bot_network
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  qdrant:
    image: qdrant/qdrant:v1.15.4
    container_name: whisperengine-multi-qdrant
    restart: unless-stopped
    ports:
      - "6334:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - bot_network
    # healthcheck:
    #   test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:6333/ || exit 1"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3

  influxdb:
    image: influxdb:2.7-alpine
    container_name: whisperengine-multi-influxdb
    restart: unless-stopped
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: whisperengine
      DOCKER_INFLUXDB_INIT_PASSWORD: whisperengine_metrics
      DOCKER_INFLUXDB_INIT_ORG: whisperengine
      DOCKER_INFLUXDB_INIT_BUCKET: performance_metrics
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: whisperengine-fidelity-first-metrics-token
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
    networks:
      - bot_network
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===== WEB INTERFACE =====
  whisperengine-web:
    build:
      context: .
      dockerfile: Dockerfile.web
    container_name: whisperengine-web-interface
    restart: unless-stopped
    ports:
      - "8081:8080"  # Changed from 8080 to 8081 to free up 8080 for monitoring dashboard
    environment:
      - DATABASE_URL=postgresql://whisperengine:whisperengine_password@postgres:5432/whisperengine
      # - REDIS_URL=redis://redis:6379/0  # Commented out - using vector-native memory only
      - QDRANT_URL=http://qdrant:6333
      - WEB_UI_HOST=0.0.0.0
      - WEB_UI_PORT=8080
      - PYTHONPATH=/app
    depends_on:
      postgres:
        condition: service_healthy
      # redis:
      #   condition: service_started
      qdrant:
        condition: service_started
    networks:
      - bot_network
    volumes:
      - ./characters:/app/characters:ro
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===== SHARED BOT IMAGE BUILD =====
  whisperengine-bot-builder:
    build:
      context: .
      dockerfile: Dockerfile.bundled-models
      target: production
    image: whisperengine-bot:${VERSION:-latest}
    profiles:
      - build-only
    # This service is only used for building the shared image
    # It doesn't run as a container - just builds the image

  # ===== BOT SERVICES (populated dynamically) =====
  elena-bot:
    image: whisperengine-bot:${VERSION:-latest}
    container_name: whisperengine-elena-bot
    restart: unless-stopped
    env_file:
      - .env.elena
    environment:
      - DISCORD_BOT_NAME=Elena
      - POSTGRES_HOST=postgres
      - QDRANT_HOST=qdrant
      - MODEL_CACHE_DIR=/app/models
      - DISABLE_MODEL_DOWNLOAD=true
      - HF_HUB_OFFLINE=false
      - TRANSFORMERS_OFFLINE=0
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEBUG_MODE=false
      - PYTHONUNBUFFERED=1
      - HEALTH_CHECK_PORT=9092
      - HEALTH_CHECK_HOST=0.0.0.0
      - CDL_DEFAULT_CHARACTER=characters/examples/elena-simple.json
    ports:
      - "9092:9092"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "elena-{.ImageName}-{.Name}-{.ID}"
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: "4.0"
        reservations:
          memory: 2G
          cpus: "2.0"
    healthcheck:
      test:
        - CMD-SHELL
        - curl -f http://localhost:9092/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - elena_backups:/app/backups
      - elena_privacy:/app/privacy
      - elena_temp:/app/temp
      - ./sql:/app/sql:ro
      # Live code mounting for development (no rebuild needed)
      - ./src:/app/src
      - ./scripts:/app/scripts
      - ./characters:/app/characters
      - ./config:/app/config
      - ./validate_config.py:/app/validate_config.py
      - ./run.py:/app/run.py
      - ./env_manager.py:/app/env_manager.py
      # Note: Using Docker logging instead of mounted log volumes
    networks:
      - bot_network
    depends_on:
      - postgres
      # - redis  # Commented out - using vector-native memory only
      - qdrant

  liln-bot:
    image: whisperengine-bot:${VERSION:-latest}
    container_name: whisperengine-liln-bot
    restart: unless-stopped
    env_file:
      - .env.liln
    environment:
      - DISCORD_BOT_NAME=Liln
      - POSTGRES_HOST=postgres
      - QDRANT_HOST=qdrant
      - MODEL_CACHE_DIR=/app/models
      - DISABLE_MODEL_DOWNLOAD=true
      - HF_HUB_OFFLINE=false
      - TRANSFORMERS_OFFLINE=0
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEBUG_MODE=false
      - PYTHONUNBUFFERED=1
      - HEALTH_CHECK_PORT=9091
      - HEALTH_CHECK_HOST=0.0.0.0
      - CDL_DEFAULT_CHARACTER=characters/examples/liln.json
    ports:
      - "9091:9091"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "liln-{.ImageName}-{.Name}-{.ID}"
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: "4.0"
        reservations:
          memory: 2G
          cpus: "2.0"
    healthcheck:
      test:
        - CMD-SHELL
        - curl -f http://localhost:9091/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - liln_backups:/app/backups
      - liln_privacy:/app/privacy
      - liln_temp:/app/temp
      - ./sql:/app/sql:ro
      # Live code mounting for development (no rebuild needed)
      - ./src:/app/src
      - ./scripts:/app/scripts
      - ./characters:/app/characters
      - ./config:/app/config
      - ./validate_config.py:/app/validate_config.py
      - ./run.py:/app/run.py
      - ./env_manager.py:/app/env_manager.py
      # Note: Using Docker logging instead of mounted log volumes
    networks:
      - bot_network
    depends_on:
      - postgres
      # - redis  # Commented out - using vector-native memory only
      - qdrant

# ===== NETWORKS =====
networks:
  bot_network:
    name: whisperengine-multi_bot_network
    driver: bridge

# ===== VOLUMES =====
volumes:
  postgres_data:
    name: whisperengine-multi_postgres_data
  # redis_data:  # Commented out - using vector-native memory only
  #   name: whisperengine-multi_redis_data
  qdrant_data:
    name: whisperengine-multi_qdrant_data
  influxdb_data:
    name: whisperengine-multi_influxdb_data
  influxdb_config:
    name: whisperengine-multi_influxdb_config
  
  # Bot-specific volumes (populated dynamically)
  elena_backups:
    name: whisperengine-multi_elena_backups
  elena_privacy:
    name: whisperengine-multi_elena_privacy
  elena_temp:
    name: whisperengine-multi_elena_temp
  elena_logs:
    name: whisperengine-multi_elena_logs
  liln_backups:
    name: whisperengine-multi_liln_backups
  liln_privacy:
    name: whisperengine-multi_liln_privacy
  liln_temp:
    name: whisperengine-multi_liln_temp
  liln_logs:
    name: whisperengine-multi_liln_logs