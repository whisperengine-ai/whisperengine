#!/bin/bash
# Auto-generated Multi-Bot Management Script
# DO NOT EDIT: This file is generated by scripts/generate_multi_bot_config.py

set -e

# Discovered bot configurations
AVAILABLE_BOTS=("elena" "liln")
PROJECT_NAME="whisperengine-multi"
COMPOSE_FILE="docker-compose.multi-bot.yml"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

show_usage() {
    echo "Multi-Bot Management Script"
    echo ""
    echo "Usage: $0 [COMMAND] [BOT_NAME]"
    echo ""
    echo "Commands:"
    echo "  list                    List all available bots"
    echo "  start [bot_name|all]    Start specific bot or all bots"
    echo "  stop [bot_name|all]     Stop specific bot or all bots"
    echo "  restart [bot_name|all]  Restart specific bot or all bots"
    echo "  logs [bot_name]         Show logs for specific bot"
    echo "  status                  Show status of all containers"
    echo "  health                  Check health of all services"
    echo ""
    echo "Available bots: elena liln"
    echo ""
    echo "Examples:"
    echo "  $0 list"
    echo "  $0 start elena"
    echo "  $0 start all"
    echo "  $0 logs marcus"
    echo "  $0 stop"
}

validate_bot_name() {
    local bot_name="$1"
    if [[ "$bot_name" == "all" ]]; then
        return 0
    fi
    
    for valid_bot in "${AVAILABLE_BOTS[@]}"; do
        if [[ "$valid_bot" == "$bot_name" ]]; then
            return 0
        fi
    done
    
    echo -e "${RED}Error: Invalid bot name '$bot_name'${NC}"
    echo -e "Available bots: elena liln"
    return 1
}

list_bots() {
    echo -e "${BLUE}[MULTI-BOT]${NC} Available bot configurations:"
    for bot in "${AVAILABLE_BOTS[@]}"; do
        echo "  ‚úì $bot"
    done
}

start_bot() {
    local bot_name="$1"
    
    if [[ "$bot_name" == "all" ]]; then
        echo -e "${BLUE}[MULTI-BOT]${NC} Starting all bots..."
        docker compose -f "$COMPOSE_FILE" -p "$PROJECT_NAME" up -d
    else
        validate_bot_name "$bot_name" || return 1
        echo -e "${BLUE}[MULTI-BOT]${NC} Starting $bot_name bot..."
        docker compose -f "$COMPOSE_FILE" -p "$PROJECT_NAME" up -d "${bot_name}-bot"
    fi
}

stop_bot() {
    local bot_name="$1"
    
    if [[ "$bot_name" == "all" || -z "$bot_name" ]]; then
        echo -e "${BLUE}[MULTI-BOT]${NC} Stopping all services..."
        docker compose -f "$COMPOSE_FILE" -p "$PROJECT_NAME" down
    else
        validate_bot_name "$bot_name" || return 1
        echo -e "${BLUE}[MULTI-BOT]${NC} Stopping $bot_name bot..."
        docker compose -f "$COMPOSE_FILE" -p "$PROJECT_NAME" stop "${bot_name}-bot"
        docker compose -f "$COMPOSE_FILE" -p "$PROJECT_NAME" rm -f "${bot_name}-bot"
    fi
}

restart_bot() {
    local bot_name="$1"
    
    if [[ "$bot_name" == "all" ]]; then
        echo -e "${BLUE}[MULTI-BOT]${NC} Restarting all services..."
        docker compose -f "$COMPOSE_FILE" -p "$PROJECT_NAME" restart
    else
        validate_bot_name "$bot_name" || return 1
        echo -e "${BLUE}[MULTI-BOT]${NC} Restarting $bot_name bot..."
        docker compose -f "$COMPOSE_FILE" -p "$PROJECT_NAME" restart "${bot_name}-bot"
    fi
}

show_logs() {
    local bot_name="$1"
    
    if [[ -z "$bot_name" ]]; then
        echo -e "${BLUE}[MULTI-BOT]${NC} Showing logs for all services..."
        docker compose -f "$COMPOSE_FILE" -p "$PROJECT_NAME" logs -f
    else
        validate_bot_name "$bot_name" || return 1
        echo -e "${BLUE}[MULTI-BOT]${NC} Showing logs for $bot_name bot..."
        docker compose -f "$COMPOSE_FILE" -p "$PROJECT_NAME" logs -f "${bot_name}-bot"
    fi
}

show_status() {
    echo -e "${BLUE}[MULTI-BOT]${NC} Container status:"
    docker compose -f "$COMPOSE_FILE" -p "$PROJECT_NAME" ps
}

check_health() {
    echo -e "${BLUE}[MULTI-BOT]${NC} Health check results:"
    for bot in "${AVAILABLE_BOTS[@]}"; do
        container_name="whisperengine-${bot}-bot"
        if docker ps --format "table {{.Names}}" | grep -q "$container_name"; then
            health=$(docker inspect --format='{{.State.Health.Status}}' "$container_name" 2>/dev/null || echo "no-healthcheck")
            if [[ "$health" == "healthy" ]]; then
                echo -e "  ‚úÖ $bot: ${GREEN}$health${NC}"
            elif [[ "$health" == "no-healthcheck" ]]; then
                echo -e "  ‚ö†Ô∏è  $bot: ${YELLOW}running (no healthcheck)${NC}"
            else
                echo -e "  ‚ùå $bot: ${RED}$health${NC}"
            fi
        else
            echo -e "  üí§ $bot: ${YELLOW}not running${NC}"
        fi
    done
}

# Main command processing
case "$1" in
    list)
        list_bots
        ;;
    start)
        start_bot "$2"
        ;;
    stop)
        stop_bot "$2"
        ;;
    restart)
        restart_bot "$2"
        ;;
    logs)
        show_logs "$2"
        ;;
    status)
        show_status
        ;;
    health)
        check_health
        ;;
    *)
        show_usage
        exit 1
        ;;
esac
